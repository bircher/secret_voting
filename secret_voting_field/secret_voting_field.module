<?php
/**
 * @file
 * The secret voting field using the Field Types API.
 */

/**
 * Provides the form for the voting questions.
 */
function secret_voting_field_vote_question_form($form, &$form_state, $items, $disabled = FALSE) {

  foreach ($items as $key => $item) {
    $item = secret_voting_field_unserialize($item);
    $form_element = array(
      '#type' => 'fieldset',
      '#title' => $item['question'],
      '#weight' => 5 + $key,
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
      '#element_validate' => array('secret_voting_field_vote_question_form_element_validate'),
      '#question_key' => $key,
      '#question_data' => $item,
    );
    // This would be the place to make more advanced voting options
    $form_element['voting_options_' . $key] = array(
      '#type' => ($item['settings']['multiple'] ? 'checkboxes' : 'radios'),
      '#options' => $item['options'],
      '#title' => $item['question'],
      '#disabled' => $disabled,

    );

    if (!$item['settings']['multiple']) {
      $form_element['instructions'] = array(
        '#markup' => t('Choose one option'),
      );
    }
    elseif ($item['settings']['min_choices'] == $item['settings']['max_choices']) {
      $form_element['instructions'] = array(
        '#markup' => t('Choose @number options', array('@number' => $item['settings']['max_choices'])),
      );
    }
    else {
      $form_element['instructions'] = array(
        '#markup' => t('Choose between @min and @max options', array('@min' => $item['settings']['min_choices'], '@max' => $item['settings']['max_choices'])),
      );
    }

    $form['voting_question_' . $key] = $form_element;
  }


  return $form;
}

function secret_voting_field_vote_question_form_element_validate($element, &$form_state) {

  $value = $element['voting_options_' . $element['#question_key']]['#value'];
  $settings = $element['#question_data']['settings'];

  if ($settings['multiple'] == FALSE && empty($value)) {
    form_error($element, t('A choice needs to be selected.'));
  }
  if (count($value) < $settings['min_choices'] || count($value) > $settings['max_choices'] ) {
    // form_error($element, t('An incorrect amount of options has been selected.'));
  }
}

/**
 * Unserializes a voting field item.
 */
function secret_voting_field_unserialize($item) {
  $item['question'] = check_plain($item['question']);
  $item['options'] = _secret_voting_field_options_from_text(check_plain($item['options']));
  $item['settings'] = unserialize($item['settings']);
  $item['settings']['multiple'] = TRUE;
  if ($item['settings']['max_choices'] == 1) {
    $item['settings']['multiple'] = FALSE;
  }
  return $item;
}

/**
 * Serializes a voting field item.
 */
function secret_voting_field_serialize($item) {
  $item['question'] = $item['question'];
  $item['options'] = _secret_voting_field_options_to_text($item['options']);
  $item['settings'] = serialize($item['settings']);
  return $item;
}

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function secret_voting_field_field_info() {
  return array(
    'secret_voting_field_vote' => array(
      'label' => t('Secret Vote'),
      'description' => t('Question and options for a secret vote.'),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'instance_settings' => array(),
      'default_widget' => 'secret_voting_field_vote',
      'default_formatter' => 'secret_voting_field_example_vote',
      'property_type' => 'secret_voting_field_vote',
      'property_callbacks' => array('secret_voting_field_vote_property_info_callback'),
    ),
    'secret_voting_field_answer' => array(
      'label' => t('Secret Vote Answer'),
      'description' => t('The answers to a secret vote.'),
      'settings' => array('allowed_values' => array(), 'allowed_values_function' => ''),
      'instance_settings' => array(),
      'default_widget' => 'secret_voting_field_none',
      'default_formatter' => 'secret_voting_field_simple_answer',
      'property_type' => 'secret_voting_field_answer',
      'property_callbacks' => array('secret_voting_field_answer_property_info_callback'),
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain RGB hex values like
 * this: #RRGGBB. If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see secret_voting_field_field_widget_error()
 */
function secret_voting_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // TODO: make sure the field input is valid, ie min value is less than max etc.

    // if (!empty($item['rgb'])) {
      // if (!preg_match('@^#[0-9a-f]{6}$@', $item['rgb'])) {
        // $errors[$field['field_name']][$langcode][$delta][] = array(
          // 'error' => 'secret_voting_field_invalid',
          // 'message' => t('Color must be in the HTML format #abcdef.'),
        // );
      // }
    // }
  }
}


/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function secret_voting_field_field_is_empty($item, $field) {
  switch ($field['type']) {
    case 'secret_voting_field_vote':
      return (empty($item['question']) || empty($item['options']));
      break;
    case 'secret_voting_field_answer':
      return FALSE;
      break;
  }
}

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see secret_voting_field_field_formatter_view()
 */
function secret_voting_field_field_formatter_info() {
  return array(
    // This formatter just displays a mock form of the vote.
    'secret_voting_field_example_vote' => array(
      'label' => t('Display how the vote will look like (not the actual vote)'),
      'field types' => array('secret_voting_field_vote'),
    ),
    // This formatter displays the answer given.
    'secret_voting_field_simple_answer' => array(
      'label' => t('Display the selected options.'),
      'field types' => array('secret_voting_field_answer'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see secret_voting_field_field_formatter_info()
 */
function secret_voting_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'secret_voting_field_example_vote':
        $element[0]['form'] = drupal_get_form('secret_voting_field_vote_question_form', $items, TRUE);


      break;

    // This formatter adds css to the page changing the '.region-content' area's
    // background color. If there are many fields, the last one will win.
    case 'secret_voting_field_simple_answer':
      $ballot = entity_metadata_wrapper('vote_ballot', $entity);
      if (isset($ballot->field_token_vote) && isset($ballot->field_token_vote->field_vote_state)) {
        if ($ballot->field_token_vote->field_vote_state->value() == 'closed') {
          foreach ($items as $delta => $item) {
            dpm($item);
            $element[$delta]['#markup'] = $item['keys'] . '<br />';
            // TODO: get rid of the comma when displaying multiple items
          }
        }
        else {
          foreach ($items as $delta => $item) {
            $element[$delta]['#markup'] = t("The rsults will be available after the vote is closed.");
          }
        }
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see secret_voting_field_field_widget_form()
 */
function secret_voting_field_field_widget_info() {
  return array(
    'secret_voting_field_vote' => array(
      'label' => t('Secret Vote'),
      'field types' => array('secret_voting_field_vote'),
    ),
    'secret_voting_field_none' => array(
      'label' => t('No widget, no editing voting answers'),
      'field types' => array('secret_voting_field_answer'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * @todo: make the default value from the field instance setting work
 */
function secret_voting_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  if ($instance['widget']['type'] == 'secret_voting_field_none') {
    return array('#markup' => 'Answers can not be edited.');
  }
  elseif ($instance['widget']['type'] != 'secret_voting_field_vote') {
    return array();
  }
  // now we are in the case of the voting field

  $defaults = secret_voting_field_vote_default_values();

  // Load the items for form rebuilds from the field state as they might not be
  // in $form_state['values'] because of validation limitations. Also, they are
  // only passed in as $items when editing existing entities.
  $field_state = field_form_get_state($element['#field_parents'], $field['field_name'], $langcode, $form_state);
  if (isset($field_state['items'])) {
    $items = $field_state['items'];
  }

  if (isset($items[$delta]) && isset($items[$delta]['question'])) {
    $value = $items[$delta];
  }
  else {
    $value = $defaults;
  }
  $settings = unserialize($value['settings']);

  $widget = $element + array(
    '#type' => 'fieldset',
    '#delta' => $delta,
    // '#process' => array('secret_voting_field_field_widget_process'),
    '#element_validate' => array('secret_voting_field_vote_widget_validate'),
  );
  $widget['question'] = array(
    '#type' => 'textfield',
    '#title' => t('Question'),
    '#default_value' => $value['question'],
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => ($element['#required'] && $delta == 0),
    '#weight' => 1,
  );
  $widget['options'] = array(
    '#type' => 'options',
    '#title' => t('Options'),
    '#limit' => 500,
    '#optgroups' => FALSE,
    '#options' => _secret_voting_field_options_from_text($value['options']),
    '#options_readonly' => FALSE,
    '#key_type' => 'mixed',
    '#key_type_toggle' => t('Customize keys (Advanced)'),
    '#key_type_toggled' => FALSE,
    '#default_value_allowed' => FALSE,
    '#required' => ($element['#required'] && $delta == 0),
    '#weight' => 2,
  );
  $widget['settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#weight' => 3,
    // Here more advanced settings may be configured
    'min_choices' => array(
      '#type' => 'textfield',
      '#title' => t('Minimum amount of choices'),
      '#default_value' => (isset($settings['min_choices']) ? $settings['min_choices'] : 1),
      '#size' => 12,
      '#maxlength' => 10,
      '#required' => TRUE,
      '#number_type' => 'integer',
      '#element_validate' => array('number_field_widget_validate'),
    ),
    'max_choices' => array(
      '#type' => 'textfield',
      '#title' => t('Maximum amount of choices'),
      '#default_value' => (isset($settings['max_choices']) ? $settings['max_choices'] : 1),
      '#size' => 12,
      '#maxlength' => 10,
      '#required' => TRUE,
      '#number_type' => 'integer',
      '#element_validate' => array('number_field_widget_validate'),
    ),
  );
  // to avoid a bug, set the field_name language and field_parent
  $widget['settings']['min_choices'] += $element;
  $widget['settings']['max_choices'] += $element;

  $widget['#default_value'] = isset($items[$delta]) ? $items[$delta] : $defaults;

  return $widget;
}

/**
 * Process the default values for the widget form.
 */
function secret_voting_field_field_widget_process($element) {
  if (!isset($element['default_value'])) {
    $element['question']['#default_value'] = $element['#default_value']['question'];
    $element['question']['#required'] = $element['#required'];

    $element['options']['#options'] = _secret_voting_field_options_from_text($element['#default_value']['options']);
    $element['options']['#required'] = $element['#required'];

    foreach (unserialize($element['#default_value']['settings']) as $option => $default_value) {
      $element['settings'][$option]['#default_value'] = $default_value;
    }
    return $element;
  }
}


/**
 * Validate the individual fields and then convert them to the format which is saved.
 */
function secret_voting_field_vote_widget_validate($element, &$form_state) {

  $delta = $element['#delta'];
  $field = $form_state['field'][$element['#field_name']][$element['#language']]['field'];
  $field_name = $field['field_name'];
  $values = $form_state['values'][$field_name][$element['#language']][$delta];

  if (isset($values['question']) && isset($values['options']['options_text'])) {

    // If the question is empty we quit.
    if (strlen($values['question']) == 0) {
      $no_value = array(
        'question' => '',
        'options' => "",
        'settings' => 'a:0:{}',
      );
      form_set_value($element, $no_value, $form_state);
      // form_error($element['question'], t("NO not continuing..."));
      return;
    }

    $settings = array(
      'min_choices' => $values['settings']['min_choices'],
      'max_choices' => $values['settings']['max_choices'],
    );
    if ($settings['min_choices'] > $settings['max_choices']) {
      $settings['min_choices'] = $values['settings']['max_choices'];
      $settings['max_choices'] = $values['settings']['min_choices'];
    }

    $value =  array(
      'question' => $values['question'],
      'options' => $values['options']['options_text'],
      'settings' => serialize($settings),
    );

    form_set_value($element, $value, $form_state);
  }


}
/**
 * Return the default value for a vote
 */
function secret_voting_field_vote_default_values() {
  return array(
    'question' => '',
    'options' => "",
    'settings' => 'a:0:{}',
  );
}

/**
 * Return the default value for a answer
 */
function secret_voting_field_answer_default_values() {
  return array(
    'keys' => '',
    'values' => 'a:0:{}',
  );
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see secret_voting_field_field_validate()
 * @see form_error()
 */
function secret_voting_field_field_widget_error($element, $error, $form, &$form_state) {
  // TODO: do something smart here...

  // switch ($error['error']) {
    // case 'secret_voting_field_invalid':
      // form_error($element, $error['message']);
      // break;
  // }
}

/**
 * Callback to alter the property info of the vote field.
 *
 * @see secret_voting_field_field_info().
 */
function secret_voting_field_vote_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<secret_voting_field_vote>' : 'secret_voting_field_vote';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['auto creation'] = 'secret_voting_field_vote_default_values';
  $property['property info'] = secret_voting_field_vote_data_property_info();

  unset($property['query callback']);
}

/**
 * Defines info for the properties of the answer field data structure.
 */
function secret_voting_field_vote_data_property_info() {
  // TODO: make these callbacks better...
  $properties = array(
    'question' => array(
      'label' => t('Question'),
      'description' => 'The direct question',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'options' => array(
      'label' => t('Answer Options'),
      'description' => 'The answer options made in the format useful for options_element',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'settings' => array(
      'label' => t('Settings'),
      'description' => 'Serialized settings for the question',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),

  );

  return $properties;
}

/**
 * Callback to alter the property info of the answer fields.
 *
 * @see secret_voting_field_field_info().
 */
function secret_voting_field_answer_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<secret_voting_field_answer>' : 'secret_voting_field_answer';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['auto creation'] = 'secret_voting_field_answer_default_values';
  $property['property info'] = secret_voting_field_answer_data_property_info();

  unset($property['query callback']);
}

/**
 * Defines info for the properties of the answer field data structure.
 */
function secret_voting_field_answer_data_property_info() {
  // TODO: make these callbacks better...
  $properties = array(
    'keys' => array(
      'label' => t('Answer Keys'),
      'description' => 'The answer keys piped',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'values' => array(
      'label' => t('Full Answer'),
      'description' => 'Serialized answer array',
      'type' => 'text',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),

  );

  return $properties;
}


/**
 * Utility function to split user-entered values from new-line separated
 * text into an array of options. Stolen from the webform module.
 *
 * @param string $text
 *   Text to be converted into a select option array.
 * @param bool $flat
 *   Optional. If specified, return the option array and exclude any optgroups.
 * @return array
 *   An array of options suitable for use as a #options property. Note that
 *   values are not filtered and may contain tokens. Individual values should be
 *   run through webform_replace_tokens() if displaying to an end-user.
 */
function _secret_voting_field_options_from_text($text, $flat = FALSE) {
  static $option_cache = array();

  // Keep each processed option block in an array indexed by the MD5 hash of
  // the option text and the value of the $flat variable.
  $md5 = md5($text);

  // Check if this option block has been previously processed.
  if (!isset($option_cache[$flat][$md5])) {
    $options = array();
    $rows = array_filter(explode("\n", trim($text)));
    $group = NULL;
    foreach ($rows as $option) {
      $option = trim($option);
      /**
       * If the Key of the option is within < >, treat as an optgroup
       *
       * <Group 1>
       *   creates an optgroup with the label "Group 1"
       *
       * <>
       *   Unsets the current group, allowing items to be inserted at the root element.
       */
      if (preg_match('/^\<([^>]*)\>$/', $option, $matches)) {
        if (empty($matches[1])) {
          unset($group);
        }
        elseif (!$flat) {
          $group = $matches[1];
        }
      }
      elseif (preg_match('/^([^|]+)\|(.*)$/', $option, $matches)) {
        $key = $matches[1];
        $value = $matches[2];
        isset($group) ? $options[$group][$key] = $value : $options[$key] = $value;
      }
      else {
        isset($group) ? $options[$group][$option] = $option : $options[$option] = $option;
      }
    }

    $option_cache[$flat][$md5] = $options;
  }
  // Return our options from the option_cache array.
  return $option_cache[$flat][$md5];
}

/**
 * Convert an array of options into text.
 */
function _secret_voting_field_options_to_text($options) {
  $output = '';
  $previous_key = FALSE;

  foreach ($options as $key => $value) {
    // Convert groups.
    if (is_array($value)) {
      $output .= '<' . $key . '>' . "\n";
      foreach ($value as $subkey => $subvalue) {
        $output .= $subkey . '|' . $subvalue . "\n";
      }
      $previous_key = $key;
    }
    // Typical key|value pairs.
    else {
      // Exit out of any groups.
      if (isset($options[$previous_key]) && is_array($options[$previous_key])) {
        $output .= "<>\n";
      }
      // Skip empty rows.
      if ($options[$key] !== '') {
        $output .= $key . '|' . $value . "\n";
      }
      $previous_key = $key;
    }
  }

  return $output;
}

