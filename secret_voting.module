<?php
/**
 * @file
 * Code for the Secret voting feature.
 */

include_once 'secret_voting.features.inc';

/**
 * Implements hook_rules_directory().
 */
function secret_voting_rules_directory() {
  // we use class based plugins and let them auto load via PSR-4 and xautoload.
  return 'src/Rules';
}

/**
 * Calculates the hash for a secret token.
 */
function secret_voting_hash($secret_token, $id, $ballot = FALSE) {
  // The ballot hash must be different from the token check hash.
  if ($ballot) {
    // here the id is the node id of the vote.
    return sha1('ballot-id' . $id . $secret_token );
  }
  else {
    // here the id is the term id or the user id of the voter.
    return sha1('token-id' . $id . $secret_token );
  }
}

/**
 * Implements hook_menu().
 */
function secret_voting_menu() {
  $items['node/%node/vote'] = array(
    'title' => 'Vote',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'secret_voting_vote_page_callback',
    'page arguments' => array(1),
    'access callback' => 'secret_voting_vote_page_access',
    'access arguments' => array(1),
    'file' => 'secret_voting.page.inc'
  );

  return $items;
}

/**
 * Page access callback.
 */
function secret_voting_vote_page_access($node) {

  // For the voting to be accessible:
  // - the node needs to be a vote and not be closed,
  // - the user must have a role listed on the vote or,
  // - the user must be assigned a voting term that is listed on the vote
  if ($node->type == 'vote') {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    if ($node_wrapper->field_vote_state->value() == 'closed') {
      return FALSE;
    }
    global $user;
    if ($node_wrapper->field_vote_type->value() == 'user') {
      if (count(secret_voting_users_allowed_to_vote_for($node_wrapper, $user))) {
        return TRUE;
      }
    }
    elseif ($node_wrapper->field_vote_type->value() == 'taxonomy') {
      if (count(secret_voting_terms_allowed_to_vote_for($node_wrapper, $user))) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Returns the list of terms or users the a user is allowed to vote for.
 */
function secret_voting_items_allowed_to_vote_for($node, $user) {
  if ($node->field_vote_type->value() == 'user') {
    return secret_voting_users_allowed_to_vote_for($node, $user);
  }
  elseif ($node->field_vote_type->value() == 'taxonomy') {
    return secret_voting_terms_allowed_to_vote_for($node, $user);
  }
  return array();
}

/**
 * Returns the list of users the a user is allowed to vote for.
 *
 * This is usually just one, if the user is allowed to vote at all.
 * But when vote delegations are in place this could add one more.
 */
function secret_voting_users_allowed_to_vote_for($node, $user){
  $user_list = array();
  if (count(array_intersect($node->field_vote_roles->value(), array_keys($user->roles)))) {
    $user_list[] = entity_metadata_wrapper('user', $user);
  }
  // here we will allow other modules to allow implementing a hook.
  return $user_list;
}

/**
 * Returns the list of terms the a user is allowed to vote for.
 *
 * This is usually just one, if the user is allowed to vote at all.
 * But when vote delegations are in place this could add one more.
 */
function secret_voting_terms_allowed_to_vote_for($node, $user){
  $term_list = array();
  $user_wrapper = entity_metadata_wrapper('user', $user);
  $user_terms = $user_wrapper->field_user_vote_terms->raw();
  $node_terms = $node->field_vote_terms->raw();
  $term_ids = array_intersect($user_terms, $node_terms);
  foreach ($term_ids as $tid) {
    $term_list[] = entity_metadata_wrapper('taxonomy_term', $tid);
  }
  return $term_list;
}



/**
 * Looks up to which token the secret belongs to.
 */
function secret_voting_secret_lookup($secret_token, $vote_wrapper) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'vote_token');
  // Set the bundle field name and field id depending on the vote type.
  if ($vote_wrapper->field_vote_type->value() == 'taxonomy') {
    $query->entityCondition('bundle', 'taxonomy_token');
    $field = 'field_token_term';
  }
  elseif ($vote_wrapper->field_vote_type->value() == 'user') {
    $query->entityCondition('bundle', 'user_token');
    $field = 'field_token_user';
  }
  $query->fieldCondition('field_token_vote', 'target_id', $vote_wrapper->getIdentifier());
  $result = $query->execute();

  if (!empty($result['vote_token'])) {
    $entities = entity_load('vote_token', array_keys($result['vote_token']));
    foreach ($entities as $entity) {
      // check all entities if the hash matches
      $wrapper = entity_metadata_wrapper('vote_token', $entity);
      $hash = secret_voting_hash($secret_token, $wrapper->{$field}->getIdentifier(), FALSE);
      if ($wrapper->field_token_hash->value() == $hash) {
        return $wrapper;
      }
    }
  }
  return NULL;
}

/**
 * Looks up to which token the secret belongs to.
 */
function secret_voting_get_secret_ballot($vote, $secret_token) {
  $ballot_hash = secret_voting_hash($secret_token, $vote->getIdentifier(), TRUE);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'vote_ballot');
  $query->entityCondition('bundle', 'vote_ballot');
  $query->fieldCondition('field_token_vote', 'target_id', $vote->getIdentifier());
  $query->fieldCondition('field_token_hash', 'value', $ballot_hash);
  $result = $query->execute();

  if (!empty($result['vote_ballot'])) {
    return entity_metadata_wrapper('vote_ballot', key($result['vote_ballot']));
  }
  return NULL;
}

/**
 * Looks up to which token the secret belongs to.
 */
function secret_voting_get_public_ballot($vote, $entity) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'vote_ballot');
  if ($vote->field_vote_type->value() == 'taxonomy') {
    $query->entityCondition('bundle', 'term_ballot');
    $query->fieldCondition('field_token_term', 'tid', $entity->getIdentifier());
  }
  elseif ($vote->field_vote_type->value() == 'user') {
    $query->entityCondition('bundle', 'user_ballot');
    $query->fieldCondition('field_token_user', 'target_id', $entity->getIdentifier());
  }
  $query->fieldCondition('field_token_vote', 'target_id', $vote->getIdentifier());
  $result = $query->execute();
  if (!empty($result['vote_ballot'])) {
    return entity_metadata_wrapper('vote_ballot', key($result['vote_ballot']));
  }
  return NULL;
}

/**
 * Checks if the token for the entity.
 */
function secret_voting_get_vote_token(EntityDrupalWrapper $vote, EntityDrupalWrapper $entity) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'vote_token');
  // Set the bundle field name and field id depending on the vote type.
  if ($vote->field_vote_type->value() == 'taxonomy') {
    $query->entityCondition('bundle', 'taxonomy_token');
    $query->fieldCondition('field_token_term', 'tid', $entity->getIdentifier());
  }
  elseif ($vote->field_vote_type->value() == 'user') {
    $query->entityCondition('bundle', 'user_token');
    $query->fieldCondition('field_token_user', 'target_id', $entity->getIdentifier());
  }
  $query->fieldCondition('field_token_vote', 'target_id', $vote->getIdentifier());
  $result = $query->execute();
  if (!empty($result['vote_token'])) {
    return entity_metadata_wrapper('vote_token', key($result['vote_token']));
  }
  return NULL;
}

/**
 * Checks if a token for a entity exists.
 */
function secret_voting_token_exists(EntityDrupalWrapper $vote, EntityDrupalWrapper $entity) {
  $token = secret_voting_get_vote_token($vote, $entity);
  return !empty($token);
}

/**
 * Checks if a user token exists.
 */
function secret_voting_get_user_token($vote, $user) {
  $query = new \EntityFieldQuery();
  $query->entityCondition('entity_type', 'vote_token')
    ->entityCondition('bundle', 'user_token')
    ->fieldCondition('field_token_vote', 'target_id', $vote->nid)
    ->fieldCondition('field_token_user', 'target_id', $user->uid);
  $result = $query->execute();
  return entity_load('vote_token', array_keys($result['vote_token']));
}

/**
 * Checks if a user token exists.
 */
function secret_voting_get_term_token($vote, $term) {
  $query = new \EntityFieldQuery();
  $query->entityCondition('entity_type', 'vote_token')
    ->entityCondition('bundle', 'taxonomy_token')
    ->fieldCondition('field_token_vote', 'target_id', $vote->nid)
    ->fieldCondition('field_token_term', 'tid', $term->tid);
  $result = $query->execute();
  return entity_load('vote_token', array_keys($result['vote_token']));
}

/**
 * Checks if a user token exists.
 */
function secret_voting_user_token_exists($vote, $user) {
  $query = new \EntityFieldQuery();
  $query->entityCondition('entity_type', 'vote_token')
    ->entityCondition('bundle', 'user_token')
    ->fieldCondition('field_token_vote', 'target_id', $vote->nid)
    ->fieldCondition('field_token_user', 'target_id', $user->uid);
  $result = $query->execute();
  return !empty($result['vote_token']);
}

/**
 * Checks if a user token exists.
 */
function secret_voting_term_token_exists($vote, $term) {
  $query = new \EntityFieldQuery();
  $query->entityCondition('entity_type', 'vote_token')
    ->entityCondition('bundle', 'taxonomy_token')
    ->fieldCondition('field_token_vote', 'target_id', $vote->nid)
    ->fieldCondition('field_token_term', 'tid', $term->tid);
  $result = $query->execute();
  return !empty($result['vote_token']);
}

/**
 * Create a secret token for voting.
 */
function secret_voting_create_secret_token() {
  $length = 15;
  // Easy characters
  $characters = '23456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';

  $token = '';
  for ($i = 0; $i < $length; $i++) {
      $token .= $characters[mt_rand(0, strlen($characters) - 1)];
  }
  return $token;
}